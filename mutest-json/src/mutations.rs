use std::collections::HashMap;
use std::time::Duration;

use serde::{Serialize, Deserialize};
use smallvec::SmallVec;

use crate::{DefId, Span};
use crate::data_structures::{Idx, IdxVec};

/// Statistics about the crate's mutations.
#[derive(Clone, Eq, PartialEq, Hash, Debug, Serialize, Deserialize)]
pub struct MutationStats {
    /// Number of program functions that can have mutations introduced in them.
    pub all_mutable_fns_count: usize,
    /// Number of program functions that have mutations generated in them.
    pub mutated_fns_count: usize,

    /// Total number of generated mutations.
    pub total_mutations_count: usize,
    /// Number of safe mutations generated.
    pub safe_mutations_count: usize,
    /// Number of unsafe mutations generated.
    pub unsafe_mutations_count: usize,
    /// Number of tainted mutations generated.
    pub tainted_mutations_count: usize,

    /// Number of mutation conflicts amongst the mutations.
    pub mutation_conflicts_count: usize,
    /// Number of mutation conflicts amongst the mutations, excluding unsafe mutations.
    pub mutation_conflicts_count_excluding_unsafe: usize,
    /// Number of mutation compatibilities amongst the mutations.
    pub mutation_compatibilities_count: usize,

    /// Number of batched mutations generated.
    pub batched_mutations_count: usize,
    /// Number of unbatched mutations generated.
    pub unbatched_mutations_count: usize,
}

/// Statistics about the mutations generated by a mutation operator.
#[derive(Clone, Eq, PartialEq, Hash, Debug, Default, Serialize, Deserialize)]
pub struct MutationOpStats {
    /// Total number of mutations generated by the operator.
    pub total_mutations_count: usize,
    /// Number of safe mutations generated by the operator.
    pub safe_mutations_count: usize,
    /// Number of unsafe mutations generated by the operator.
    pub unsafe_mutations_count: usize,
    /// Number of tainted mutations generated by the operator.
    pub tainted_mutations_count: usize,

    /// Number of batched mutations generated by the operator.
    pub batched_mutations_count: usize,
    /// Number of unbatched mutations generated by the operator.
    pub unbatched_mutations_count: usize,
}

/// Mutation ID.
///
/// # Indices
///
/// Mutation IDs are 1-based, so their corresponding indices are
/// one less than the value of the ID itself.
#[derive(Copy, Clone, Eq, PartialEq, Hash, Debug, Serialize, Deserialize)]
pub struct MutationId(pub u32);

impl Idx for MutationId {
    fn as_index(self) -> usize {
        self.0 as usize - 1
    }

    fn from_index(idx: usize) -> Self {
        Self(idx as u32 + 1)
    }
}

/// The location of a mutation's code substitution, describing
/// where in the original code, and how must the code substiution be applied.
#[derive(Clone, Eq, PartialEq, Hash, Debug, Serialize, Deserialize)]
#[serde(rename_all = "snake_case")]
#[serde(tag = "kind", content = "span")]
pub enum SubstitutionLocation {
    InsertBefore(Span),
    InsertAfter(Span),
    Replace(Span),
}

impl SubstitutionLocation {
    pub fn span(&self) -> &Span {
        match self {
            SubstitutionLocation::InsertBefore(span) => span,
            SubstitutionLocation::InsertAfter(span) => span,
            SubstitutionLocation::Replace(span) => span,
        }
    }
}

/// The kind of node that is substituted in by this substitution.
#[derive(Copy, Clone, Eq, PartialEq, Hash, Debug, Serialize, Deserialize)]
#[serde(rename_all = "snake_case")]
pub enum SubstituteKind {
    Expr,
    Stmt,
    Local,
}

/// The node substituted in by a mutation's code substitution.
#[derive(Clone, Eq, PartialEq, Hash, Debug, Serialize, Deserialize)]
pub struct Substitute {
    pub kind: SubstituteKind,
    pub replacement: String,
}

/// Code substitution that makes up program mutations.
#[derive(Clone, Eq, PartialEq, Hash, Debug, Serialize, Deserialize)]
pub struct Substitution {
    pub location: SubstitutionLocation,
    pub substitute: Substitute,
}

/// The mutation safety property of the mutation, denoting
/// whether the mutation may cause undefined behavior.
#[derive(Copy, Clone, Eq, PartialEq, Hash, Debug, Serialize, Deserialize)]
#[serde(rename_all = "snake_case")]
pub enum MutationSafety {
    /// Safe mutations must not introduce any *new* undefined behavior into the program.
    Safe,
    /// Tainted mutations *may* alter the behavior of dependent unsafe code,
    /// and thus *may* introduce new undefined behavior into the program.
    Tainted,
    /// Unsafe mutations *may* alter the behavior of the unsafe code they relate to directly,
    /// and thus *may* introduce new undefined behavior into the program.
    Unsafe,
}

#[derive(Copy, Clone, Eq, PartialEq, Hash, Debug, Serialize, Deserialize)]
pub struct TargetId(pub u32);

impl Idx for TargetId {
    fn as_index(self) -> usize {
        self.0 as usize
    }

    fn from_index(idx: usize) -> Self {
        Self(idx as u32)
    }
}

/// Data associated with a mutation target's association with an entry point.
#[derive(Clone, Eq, PartialEq, Hash, Debug, Serialize, Deserialize)]
pub struct EntryPointAssociation {
    /// Distance in calls between the entry point and the target.
    pub distance: usize,
    /// Whether there exists a call path between the entry point and the target
    /// that is tainted according to mutation safety.
    pub tainted_call_path: bool,
}

/// Reachable, mutable definition in which mutation operators were invoked in
/// to generate program mutations.
#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct Target {
    pub target_id: TargetId,

    /// The corresponding definition in the call graph.
    pub def_id: DefId,
    /// Distance in calls between the target and the closest entry point.
    pub distance: usize,
    /// Mutation safety property of the target, denoting
    /// whether mutations contained in this definition may cause undefined behavior.
    pub safety: MutationSafety,
    /// Entry points from which this target is reachable from, and
    /// data associated with each entry point.
    pub reachable_from: HashMap<String, EntryPointAssociation>,
}

/// A program mutation.
#[derive(Clone, Eq, PartialEq, Hash, Debug, Serialize, Deserialize)]
pub struct Mutation {
    pub mutation_id: MutationId,

    /// Target function the mutation is contained within.
    pub target_id: TargetId,
    /// Span of the origin node that is targeted by the mutation.
    pub origin_span: Span,

    /// Name of the mutation operator that generated the mutation.
    pub mutation_op: String,

    /// User-facing, descriptive name of the mutation.
    pub display_name: String,

    /// Code substitutions that make up the mutation.
    pub substs: SmallVec<[Substitution; 1]>,

    /// Mutation safety property of the mutation, denoting
    /// whether the mutation may cause undefined behavior.
    pub safety: MutationSafety,
}

/// Mutation batch ID.
///
/// # Indices
///
/// Mutation batch IDs are 1-based, so their corresponding indices are
/// one less than the value of the ID itself.
#[derive(Copy, Clone, Eq, PartialEq, Hash, Debug, Serialize, Deserialize)]
pub struct MutationBatchId(pub u32);

impl Idx for MutationBatchId {
    fn as_index(self) -> usize {
        self.0 as usize - 1
    }

    fn from_index(idx: usize) -> Self {
        Self(idx as u32 + 1)
    }
}

/// Batch of compatible mutations.
#[derive(Clone, Eq, PartialEq, Hash, Debug, Serialize, Deserialize)]
pub struct MutationBatch {
    pub mutation_batch_id: MutationBatchId,
    pub mutation_ids: SmallVec<[MutationId; 1]>,
}

/// Information about the crate's mutations.
#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct MutationsInfo {
    /// Format version header.
    pub format_version: u32,

    /// Statistics about the mutations.
    pub stats: MutationStats,
    /// Individual statistics about the mutations generated by each mutation operator.
    pub per_op_stats: HashMap<String, MutationOpStats>,
    /// All program mutations.
    pub mutations: IdxVec<MutationId, Mutation>,

    /// Generated batches of compatible mutations.
    pub mutation_batches: Option<IdxVec<MutationBatchId, MutationBatch>>,

    /// Reachable, mutable definitions referred to by the generated mutations.
    pub targets: IdxVec<TargetId, Target>,

    /// Time it took to generate the mutations.
    pub duration: Duration,
}
